

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.content.IntentCompat;
import android.util.Log;

public class BluetoothService {
    // Debugging
    private static final String TAG = "BluetoothService";
    private static final boolean D = true;

    // Name for the SDP record when creating server socket
    private static final String NAME = "BluetoothChat";

    // Unique UUID for this application
    private static final UUID MY_UUID = UUID
            .fromString("UUID 입력");

    // Member fields
    private final BluetoothAdapter mAdapter;
    private final Handler mHandler;
    private AcceptThread mAcceptThread;
    private ConnectThread mConnectThread;
    private ConnectedThread mConnectedThread;
    private int mState;

    private EnCodeAndDeCode EnCodeAndDeCode;

    // Constants that indicate the current connection state
    public static final int STATE_NONE = 0; // we're doing nothing
    public static final int STATE_LISTEN = 1; // now listening for incoming
    public static final int STATE_CONNECTING = 2; // now initiating an outgoing
    public static final int STATE_CONNECTED = 3; // now connected to a remote

    /**
     * Constructor. Prepares a new BluetoothChat session.
     *
     * @param context The UI Activity Context
     * @param handler A Handler to send messages back to the UI Activity
     */
    public MRDBluetoothService(Context context, Handler handler) {
        mAdapter = BluetoothAdapter.getDefaultAdapter();
        mState = STATE_NONE;
        mHandler = handler;
        MDEnCodeAndDeCode = new MDEnCodeAndDeCode();
    }

    /**
     * Set the current state of the chat connection
     *
     * @param state An integer defining the current connection state
     */
    private synchronized void setState(int state) {
        if (D)
            Log.d(TAG, "setState() " + mState + " -> " + state);
        mState = state;

        // Give the new state to the Handler so the UI Activity can update
        mHandler.obtainMessage(###UI Activity###.MESSAGE_STATE_CHANGE, state, -1)
                .sendToTarget();
    }

    /**
     * Return the current connection state.
     */
    public synchronized int getState() {
        return mState;
    }

    /**
     * Start the chat service. Specifically start AcceptThread to begin a
     * session in listening (server) mode. Called by the Activity onResume()
     */
    public synchronized void start() {
        if (D)
            Log.d(TAG, "start");

        // Cancel any thread attempting to make a connection
        if (mConnectThread != null) {
            mConnectThread.cancel();
            mConnectThread = null;
        }

        // Cancel any thread currently running a connection
        if (mConnectedThread != null) {
            mConnectedThread.cancel();
            mConnectedThread = null;
        }

        // Start the thread to listen on a BluetoothServerSocket
        if (mAcceptThread == null) {
            mAcceptThread = new AcceptThread();
            mAcceptThread.start();
        }
        setState(STATE_LISTEN);
    }

    /**
     * Start the ConnectThread to initiate a connection to a remote device.
     *
     * @param device The BluetoothDevice to connect
     */
    public synchronized void connect(BluetoothDevice device) {
        if (D)
            Log.d(TAG, "connect to: " + device);

        // Cancel any thread attempting to make a connection
        if (mState == STATE_CONNECTING) {
            if (mConnectThread != null) {
                mConnectThread.cancel();
                mConnectThread = null;
            }
        }

        // Cancel any thread currently running a connection
        if (mConnectedThread != null) {
            mConnectedThread.cancel();
            mConnectedThread = null;
        }

        // Start the thread to connect with the given device
        mConnectThread = new ConnectThread(device);
        mConnectThread.start();
        setState(STATE_CONNECTING);
    }

    /**
     * Start the ConnectedThread to begin managing a Bluetooth connection
     *
     * @param socket The BluetoothSocket on which the connection was made
     * @param device The BluetoothDevice that has been connected
     */
    public synchronized void connected(BluetoothSocket socket,
                                       BluetoothDevice device) {
        if (D)
            Log.d(TAG, "connected");

        // Cancel the thread that completed the connection
        if (mConnectThread != null) {
            mConnectThread.cancel();
            mConnectThread = null;
        }

        // Cancel any thread currently running a connection
        if (mConnectedThread != null) {
            mConnectedThread.cancel();
            mConnectedThread = null;
        }

        // Cancel the accept thread because we only want to connect to one
        // device
        if (mAcceptThread != null) {
            mAcceptThread.cancel();
            mAcceptThread = null;
        }

        // Start the thread to manage the connection and perform transmissions
        mConnectedThread = new ConnectedThread(socket);
        mConnectedThread.start();

        // Send the name of the connected device back to the UI Activity
        Message msg = mHandler
                .obtainMessage(###UI Activity###.MESSAGE_DEVICE_NAME);
        Bundle bundle = new Bundle();
        bundle.putString(###UI Activity###.DEVICE_NAME, device.getName());
        msg.setData(bundle);
        mHandler.sendMessage(msg);
        setState(STATE_CONNECTED);
    }

    /**
     * Stop all threads
     */
    public synchronized void stop() {
        if (D)
            Log.d(TAG, "stop");
        if (mConnectThread != null) {
            mConnectThread.cancel();
            mConnectThread = null;
        }
        if (mConnectedThread != null) {
            mConnectedThread.cancel();
            mConnectedThread = null;
        }
        if (mAcceptThread != null) {
            mAcceptThread.cancel();
            mAcceptThread = null;
        }
        setState(STATE_NONE);
    }

    /**
     * Write to the ConnectedThread in an unsynchronized manner
     *
     * @param message The bytes to write
     * @see ConnectedThread#write(byte[])
     */
    public void write(byte[] message) {
        // Create temporary object
        ConnectedThread r;
        // Synchronize a copy of the ConnectedThread
        synchronized (this) {
            if (mState != STATE_CONNECTED)
                return;
            r = mConnectedThread;
        }
        // Perform the write unsynchronized
        r.write(message);
    }

    /**
     * Indicate that the connection attempt failed and notify the UI Activity.
     */
    private void connectionFailed() {
        setState(STATE_LISTEN);

        // Send a failure message back to the Activity
        Message msg = mHandler.obtainMessage(###UI Activity###.MESSAGE_TOAST);
        Bundle bundle = new Bundle();
        bundle.putString(###UI Activity###.TOAST, "해당 기기에 연결 할 수 없습니다");
        msg.setData(bundle);
        mHandler.sendMessage(msg);
    }

    private void showMsg(String data) {
        Message msg = mHandler.obtainMessage(MRDMainActivity.MESSAGE_TOAST);
        Bundle bundle = new Bundle();
        bundle.putString(MRDMainActivity.TOAST, data);
        msg.setData(bundle);
        mHandler.sendMessage(msg);
    }

    /**
     * Indicate that the connection was lost and notify the UI Activity.
     */
    private void connectionLost() {
        setState(STATE_LISTEN);

        // Send a failure message back to the Activity
        Message msg = mHandler.obtainMessage(###UI Activity###.MESSAGE_TOAST);
        Bundle bundle = new Bundle();
        bundle.putString(###UI Activity###.TOAST, "연결이 끊겼습니다"); // Disconnect
        msg.setData(bundle);
        mHandler.sendMessage(msg);

        Message msg2 = mHandler.obtainMessage(MRDMainActivity.MESSAGE_DISCONNECT_BLUETOOTH); // Disconnect
        mHandler.sendMessage(msg2);

    }


    /**
     * As a server
     * If a device needs to be connected to two or more devices, it needs to be transmitted as a server. The BluetoothServerSocket class is provided in android to process the information sent by the user.
     * The server socket responds when it accepts (accepted) a BluetoothSocket sent by a client
     * This thread runs while listening for incoming connections. It behaves
     * like a server-side client. It runs until a connection is accepted (or
     * until cancelled).
     */
    private class AcceptThread extends Thread {
        // The local server socket
        private final BluetoothServerSocket mmServerSocket;  // BT Server

        public AcceptThread() {
            BluetoothServerSocket tmp = null;

            // Create a new listening server socket
            try {
                tmp = mAdapter
                        .listenUsingRfcommWithServiceRecord(NAME, MY_UUID); //only recieve service
            } catch (IOException e) {
                Log.e(TAG, "listen() failed", e);
            }
            mmServerSocket = tmp;
            Log.d("srvsocket - ", "tmp : " + mmServerSocket);

        }

        public void run() {
            if (D)
                Log.d(TAG, "BEGIN mAcceptThread" + this);
            setName("AcceptThread");
            BluetoothSocket socket = null;

            // Listen to the server socket if we're not connected
            while (mState != STATE_CONNECTED) { // Keep the connection until an exception occurs or the socket returns
                try {
                    // This is a blocking call and will only return on a
                    // successful connection or an exception
                    socket = mmServerSocket.accept(); // If a connection agrees
                } catch (IOException e) {
                    Log.e(TAG, "accept() failed", e);
                    break;
                }

                // If a connection was accepted
                if (socket != null) {
                    synchronized (MRDBluetoothService.this) {
                        switch (mState) {
                            case STATE_LISTEN:
                            case STATE_CONNECTING:
                                // Situation normal. Start the connected thread.
                                connected(socket, socket.getRemoteDevice()); //Manage an already connected RFCOMM channel in a separate thread。
                                break;
                            case STATE_NONE:
                            case STATE_CONNECTED:
                                // Either not ready or already connected. Terminate
                                // new socket.
                                try {
                                    socket.close();
                                } catch (IOException e) {
                                    Log.e(TAG, "Could not close unwanted socket", e);
                                }
                                break;
                        }
                    }
                }
            }
            if (D)
                Log.i(TAG, "=== END mAcceptThread ===");
        }

        public void cancel() { //Cancel the socket connection, and then the thread returns
            if (D)
                Log.d(TAG, "cancel " + this);
            try {
                mmServerSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of server failed", e);
            }
        }
    }

    /**
     * In order to initialize a connection to a remote device, you must first obtain the local BluetoothDevice object
     * This thread runs while attempting to make an outgoing connection with a
     * device. It runs straight through; the connection either succeeds or
     * fails.
     */
    private class ConnectThread extends Thread {
        private final BluetoothSocket mmSocket;
        private final BluetoothDevice mmDevice;

        public ConnectThread(BluetoothDevice device) {
            mmDevice = device;
            BluetoothSocket tmp = null;

            // Get a BluetoothSocket for a connection with the
            // given BluetoothDevice
            try {
                tmp = device.createRfcommSocketToServiceRecord(MY_UUID); // Client creation

            } catch (IOException e) {
                Log.e(TAG, "create() failed", e);
            }
            mmSocket = tmp;
        }

        public void run() {
            Log.i(TAG, "=== BEGIN mConnectThread ===");
            setName("ConnectThread");

            // Always cancel discovery because it will slow down a connection
            mAdapter.cancelDiscovery(); //Cancel the discovery of remote devices, which will reduce system performance

            // Make a connection to the BluetoothSocket
            try {
                // This is a blocking call and will only return on a
                // successful connection or an exception
                mmSocket.connect();
            } catch (IOException e) {
                connectionFailed();
                // Close the socket
                try {
                    mmSocket.close();
                } catch (IOException e2) {
                    Log.e(TAG,
                            "unable to close() socket during connection failure",
                            e2);
                }
                // Start the service over to restart listening mode
                MRDBluetoothService.this.start();
                return;
            }

            // Reset the ConnectThread because we're done
            synchronized (MRDBluetoothService.this) {
                mConnectThread = null;
            }

            // Start the connected thread
            connected(mmSocket, mmDevice); // manageConnectedSocket(cwjSocket); Manage an already connected RFCOMM channel in a separate thread.


        }

        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of connect socket failed", e);
            }
        }
    }

    /**
     * Processing data flow on Java is very simple, providing conversion between InputSream, OutputSream and byte arrays.
     * This thread runs during a connection with a remote device.
     * It handles all incoming and outgoing transmissions.
     */
    @SuppressLint("SimpleDateFormat")
    private class ConnectedThread extends Thread {// Main communication
        private final BluetoothSocket mmSocket; // Client
        private final InputStream mmInStream;
        private final OutputStream mmOutStream;

        // private final ObjectOutputStream mmObjOutStream;

        public ConnectedThread(BluetoothSocket socket) {
            Log.d(TAG, "create ConnectedThread");
            mmSocket = socket;
            InputStream tmpIn = null; // The above definition is final, which uses temp temporary objects
            OutputStream tmpOut = null;
            // ObjectOutputStream tmpObjOut = null;

            // Get the BluetoothSocket input and output streams
            try {
                tmpIn = socket.getInputStream(); //Use getInputStream as a stream processing
                tmpOut = socket.getOutputStream();


                // tmpObjOut = new ObjectOutputStream(tmpOut);
            } catch (IOException e) {
                Log.e(TAG, "temp sockets not created", e);
            }

            mmInStream = tmpIn;
            mmOutStream = tmpOut;
            // mmObjOutStream = tmpObjOut;
        }

        public void run() {
            // Read byte by byte here, and perform protocol judgment
            Log.i(TAG, "=== BEGIN mConnectedThread ===");
            int len_mid = 4;
            List<Byte> iTmpUARTBuffer = new ArrayList<Byte>(); // Define upstream packet buffer
            List<Integer> checkBuffer = new ArrayList<Integer>();
            List<Byte> UARTBuffer = new ArrayList<Byte>(); // Completed packet storage area
            int iTmp, iCheck, iCmd, iSta, iVolt, iRead, iLen, bytes, iPID, iiLen, iRPDID,GID = 0;
            // iCheck为明文校验和
            long iiRead = 0, iMID_temp = 0;
            String iMID = "";
            iRPDID = iTmp = iPID = iCheck = iVolt = iSta = bytes = iiLen = 0;
            iTmpUARTBuffer.clear();
            checkBuffer.clear();
            UARTBuffer.clear();
            while (true) {
                try {
                    bytes = mmInStream.read();
                } catch (IOException e) {
                    bytes = -1;
                    iTmpUARTBuffer.clear();
                    checkBuffer.clear();
                    UARTBuffer.clear();
                    Log.e(TAG, "disconnected", e);
                    connectionLost();
                    break;
                }
                if (bytes == -1) {
                    iTmpUARTBuffer.clear();
                    checkBuffer.clear();
                    UARTBuffer.clear();
                    continue;
                }

                if (bytes != 0x24 && iTmpUARTBuffer.size() == 0) { //Serial Uplink Data Protocol Frame Header（0x24）
                    continue;
                }

                iTmpUARTBuffer.add((byte) bytes); //Raw Uplink Data
                checkBuffer.add(bytes);
                if (iTmpUARTBuffer.size() < 2) {
                    continue;
                }
                // Extract the length of the ciphertext
                iiLen = iTmpUARTBuffer.get(1); // Cipher text length (data length encrypted from PIDH~CS bytes), one byte
                if (iiLen < 5 + len_mid || iiLen > 24 + len_mid) {  //The minimum length is 8, the maximum length is 27 = 8+16+3
                    Log.e(TAG, "암호문 길이가 잘못되었습니다.");
                    iTmpUARTBuffer.clear();
                    checkBuffer.clear();
                    continue;
                }
                // Total length of data packet taken out
                iLen = iiLen + 3;  // Total length of data packet

                //The total length obtained is less than the total length of the data packet, repeat
                if (iTmpUARTBuffer.size() < iLen) {
                    continue;
                }

                if (iTmpUARTBuffer.size() == iLen) {
                    byte[] msg = new byte[iTmpUARTBuffer.size()];
                    for (int i = 0; i < iTmpUARTBuffer.size(); i++) {
                        msg[i] = iTmpUARTBuffer.get(i);

                    }
                /******************************* FOR DEBUG ***********************************/

                    StringBuilder sb = new StringBuilder();
                    for (final byte b : msg) {
                        sb.append(String.format("%02x ", b & 0xff));
                    }
                    Log.d("UpData Stream", "Law Msg : " + checkBuffer);

                    Log.d("UpData Stream", "Law Msg(hex) : " + sb.toString());
               /******************************* FOR DEBUG ***********************************/

                }


                // Calculate the checksum of the plaintext, and take the low byte from the checksum of PIDH~RSSI. W
                for (iCheck = 0, iTmp = 0; iTmp < iLen - 1; iTmp++) {
                    iCheck += (iTmpUARTBuffer.get(iTmp) & 0xFF);
                }
                if ((iTmpUARTBuffer.get(iLen - 1) & 0xFF) != (iCheck & 0xFF)) {
                    Log.e(TAG, "Data verification error before decryption");
                    iTmpUARTBuffer.clear();
                    checkBuffer.clear();
                    continue;
                }

                //The verification is correct, then the data should be taken out for decryption operation, first remove the head and tail, the order must be paid attention to                
                iTmpUARTBuffer.remove(iLen - 1);  // Throw away the tail SUM
                iTmpUARTBuffer.remove(1); // Cipher text length Encrypted data length from PIDH~CS bytes
                iTmpUARTBuffer.remove(0); // FH upstream frame header 0x24
                UARTBuffer.clear();
                UARTBuffer = MDEnCodeAndDeCode.DeCode(iTmpUARTBuffer, iiLen); // Decoded Uplink Data
                
                byte[] dcmsg = new byte[UARTBuffer.size()];
                for (int i = 0; i < UARTBuffer.size(); i++) {
                    dcmsg[i] = UARTBuffer.get(i);
                }
                /******************************* FOR DEBUG ***********************************/

                StringBuilder sb = new StringBuilder();
                for (final byte b : dcmsg) {
                    sb.append(String.format("%02x ", b & 0xff));
                }
                Log.d("UpData Stream", "Decode Msg : " + UARTBuffer);

                Log.d("UpData Stream", "Decode Msg(hex) : " + sb.toString());
                /******************************* FOR DEBUG ***********************************/


                iTmpUARTBuffer.clear();
                checkBuffer.clear();
                iLen = UARTBuffer.size();
                // Calculate plaintext check
                for (iCheck = 0, iTmp = 0; iTmp < iLen - 1; iTmp++) {
                    iCheck += (UARTBuffer.get(iTmp) & 0xFF);
                }

                if ((UARTBuffer.get(iLen - 1) & 0xFF) != (iCheck & 0xFF)) {
                    iTmpUARTBuffer.clear();
                    checkBuffer.clear();
                    Log.e(TAG, "Data verification error after decryption");
                    continue;
                }

        
                // Get project ID
                iPID = (UARTBuffer.get(1) & 0xFF);
                iPID |= ((UARTBuffer.get(0) << 8) & 0xFF00);
                MRDFirmwareStatus.setpID(iPID);
                
                Message message = new Message();
         
                // CTR: control word, 0x00=uplink user data; 0x01=uplink RHU-PDAD firmware version information;
                // 0x02=Uplink upgrade request data packet; 0x03~0xFF reserved distinguishing information classification
                switch (UARTBuffer.get(4)) { //case COMMAND 
                    case 0x00:
                         if (UARTBuffer.size() != 24) { // 24 is just the total length of the ciphertext
                                break;
                         }
                         //iMID_temp : 4byte data
                         iMID_temp = (UARTBuffer.get(5 + len_mid) & 0xFF);
                         iMID_temp |= ((UARTBuffer.get(4 + len_mid) << 8) & 0xFF00);
                         iMID_temp |= ((UARTBuffer.get(3 + len_mid) << 16) & 0xFF0000);
                         iMID_temp |= ((UARTBuffer.get(2 + len_mid) << 24) & 0xFF000000);
                         //get String
                         iMID = String.valueOf(iMID_temp);
                         
                         //iVolt : 소숫점 두자리, 오차 계산
                         BigDecimal iVolt_double = new BigDecimal("0");
                         BigDecimal voltage_int = new BigDecimal(String.valueOf((iVolt & 0x7F)));
                         BigDecimal constant = new BigDecimal("10");
                         iVolt_double = voltage_int.divide(constant, 1, BigDecimal.ROUND_DOWN);

                        Log.d("sendToHandler", "Handler Msg : " + md_up_data);
                        iMID = "";
                        mHandler.obtainMessage(MRDMainActivity.MESSAGE_UIUPDATA,
                                md_up_data).sendToTarget();
                        break;
                }
            }
        }

        /**
         * Write to the connected OutStream.
         *
         * @param message The bytes to write
         */
        public void write(byte[] message) {

            byte[] outmsg = null;
            ByteArrayOutputStream output;
            ByteArrayInputStream input;
            input = new ByteArrayInputStream(message);
            output = new ByteArrayOutputStream();
            int data = 0;
            while ((data = input.read()) != -1) {
                output.write(data);
            }
            outmsg = output.toByteArray();


            if (message == null) {
                Log.e(TAG, "=== 发送的数据为空！ ===");
            }
            StringBuilder sb = new StringBuilder();
            for (final byte b : message) {
                sb.append(String.format("%02x ", b & 0xff));
            }
            Log.d("LAWDATA - ", "outputStream : " + Arrays.toString(outmsg));
            Log.d("LAWDATA - ", "outputStream(hex) : " + sb.toString());

            /******************** FOR DEBUG **********************************/
            // String readMessage = "";
            // for (int iTmp = 0; iTmp < message.length; iTmp++) {
            // if (message[iTmp] < 0) {
            // readMessage += Integer
            // .toHexString((255 + message[iTmp]) + 1);
            // } else {
            // readMessage += Integer.toHexString(message[iTmp]);
            // }
            // readMessage += " ";
            // }
            // Log.i(TAG, "=== send data ===" + readMessage);
            /******************** FOR DEBUG **********************************/
            try {
                mmOutStream.write(message);

            } catch (IOException e) {
                Log.e(TAG, "Exception during write", e);
            }
        }

        public void cancel() {
            try {
                mmSocket.close();
            } catch (IOException e) {
                Log.e(TAG, "close() of connect socket failed", e);
            }
        }
    }
}
